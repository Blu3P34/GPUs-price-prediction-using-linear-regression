plot(data2$Max_Power, data2$Release_Price,
main = "Release price distribution \n with respect to max power",
xlab = "Max power", ylab = "Release price", col = "blue", pch = 16)
plot(data2$PSU_Amp, data2$Release_Price,
main = "Release price distribution \n with respect to PSU Amp",
xlab = "PSU Amp", ylab = "Release price", col = "blue", pch = 16)
plot(data2$PSU_V, data2$Release_Price,
main = "Release price distribution \n with respect to PSU V",
xlab = "PSU V", ylab = "Release price", col = "blue", pch = 16)
shader_count <- unique(data2$Shader)
shader_freq <- table(data2$Shader)
pie(shader_freq, labels = paste(shader_freq,"\n",shader_count), main = "Shader distribution", cex = 0.8)
directx_count <- unique(data2$Direct_X)
directx_freq <- table(data2$Direct_X)
pie(directx_freq, labels = paste(directx_freq,"\n",directx_count), main = "Direct X distribution", cex = 0.8)
opengl_count <- unique(data2$Open_GL)
opengl_freq <- table(data2$Open_GL)
pie(opengl_freq, labels = paste(opengl_freq,"\n",opengl_count), main = "Direct X distribution", cex = 0.8)
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Pixel_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to pixel rate",
xlab = "Pixel rate", ylab = "Release price", col = "blue", pch = 16)
plot(data2$TMUs, data2$Release_Price,
main = "Release price distribution \n with respect to TMUs",
xlab = "TMUs", ylab = "Release price", col = "blue", pch = 16)
plot(data2$ROPs, data2$Release_Price,
main = "Release price distribution \n with respect to ROPs",
xlab = "ROPs", ylab = "Release price", col = "blue", pch = 16)
plot(data2$L2_Cache, data2$Release_Price,
main = "Release price distribution \n with respect to L2 cache",
xlab = "L2 cache", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Best_Width, data2$Release_Price,
main = "Release price distribution \n with respect to best width",
xlab = "Best width", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Best_Height, data2$Release_Price,
main = "Release price distribution \n with respect to best height",
xlab = "Best height", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Resolution_W, data2$Release_Price,
main = "Release price distribution \n with respect to resolution (width)",
xlab = "Resolution (width)", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Resolution_H, data2$Release_Price,
main = "Release price distribution \n with respect to resolution (height)",
xlab = "Resolution (height)", ylab = "Release price", col = "blue", pch = 16)
plot(data2$DVI_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to DVI connection",
xlab = "DVI connection", ylab = "Release price", col = "blue", pch = 16)
plot(data2$DisplayPort_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to display port connection",
xlab = "Display port connection", ylab = "Release price", col = "blue", pch = 16)
plot(data2$HDMI_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to HDMI connection",
xlab = "HDMI connection", ylab = "Release price", col = "blue", pch = 16)
powerconnector_count <- unique(data2$Power_Connector)
powerconnector_freq <- table(data2$Power_Connector)
pie(powerconnector_freq, labels = paste(powerconnector_freq,"\n",powerconnector_count), main = "Power connector distribution", cex = 0.8)
plot(data2$Days_since_RD, data2$Release_Price,
main = "Release price distribution \n with respect to days since release date",
xlab = "Days since release date", ylab = "Release price", col = "blue", pch = 16)
encoded_architecture <- model.matrix(~ data2$Architecture - 1, data = data2)
encoded_series <- model.matrix(~ data2$Series - 1, data = data2)
encoded_manufacturer <- model.matrix(~ data2$Manufacturer - 1, data = data2)
encoded_memorytype <- model.matrix(~ data2$Memory_Type - 1, data = data2)
encoded_process <- model.matrix(~ data2$Process - 1, data = data2)
encoded_directx <- model.matrix(~ data2$Direct_X - 1, data = data2)
encoded_opengl <- model.matrix(~ data2$Open_GL - 1, data = data2)
encoded_powerconnector <- model.matrix(~ data2$Power_Connector - 1, data = data2)
encoded_data <- cbind(encoded_architecture, encoded_series, encoded_manufacturer, encoded_memorytype,
encoded_opengl, encoded_directx, encoded_process, encoded_powerconnector)
column_to_exclude <- c(2, 3, 4, 11, 16, 21, 22, 36)
data3 <- data2[, -column_to_exclude]
data4 <- cbind(data3, encoded_data)
## Linearity
data4 <- as.data.frame(sapply(data4, as.numeric))
correlations <- sapply(data4[, -1], function(column) cor(data4[[1]], column))
strong_correlations <- correlations[abs(correlations) >= 0.6]
print(strong_correlations)
data5 <- data4 %>%
select(Release_Price, Memory,
Memory_Bandwidth, Max_Power, Texture_Rate, Pixel_Rate,
TMUs, ROPs, L2_Cache, Best_Height, Best_Width)
## Multicolinearity
library(corrplot)
cor_matrix <- cor(data5)
corrplot(cor_matrix)
print(cor_matrix)
data5 <- data4 %>%
select(Release_Price, Memory,
Memory_Bandwidth, Max_Power, Texture_Rate, Pixel_Rate,
TMUs, ROPs, L2_Cache, Best_Width)
# Linear regression model
lrm <- lm(data5$Release_Price ~ ., data = data5)
print(lrm)
## Independence, normality and homoscedasticity of residuals
residuals <- residuals(lrm)
hist(residuals, main = "Histogram of Residuals")
plot(lrm$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
bptest(lrm)
# weighted least square
wls_model <- lm(Release_Price ~  Memory +
Memory_Bandwidth + Max_Power + Texture_Rate + Pixel_Rate +
TMUs + ROPs + L2_Cache + Best_Width, data = data5, weights = 1 / residuals(lrm)^2)
## Independence, normality and homoscedasticity of residuals
residuals <- residuals(wls_model)
hist(residuals, main = "Histogram of Residuals")
plot(wls_model$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
bptest(wls_model)
# Testing model
NVIDIA_GeForce_GTX_1080 <- data.frame('Memory'= c(8192),
'Memory_Bandwidth'= c(288),
'Max_Power'= c(120),
'Texture_Rate'=c(153.6),
'Pixel_Rate'=c(81.6),
'TMUs'=c(96),
'ROPs'=c(48),
'L2_Cache'=c(1536),
'Best_Width' = c(7680))  # Example new data for prediction
predicted_prices <- predict(wls_model, newdata = NVIDIA_GeForce_GTX_1080)
print(predicted_prices)
View(data5)
# weighted least square
wls_model <- lm(Release_Price ~  Memory +
Memory_Bandwidth + Max_Power + Texture_Rate + Pixel_Rate +
TMUs + ROPs + L2_Cache + Best_Width, data = data5, weights = 1 / residuals(lrm)^2)
View(wls_model)
print(wls_model)
print(lrm)
View(data3)
# Linear regression model
lrm <- lm(data5$Release_Price ~ ., data = data5)
print(lrm)
# Testing model
new_data <- data.frame('Memory'= c(8192, 4096),
'Memory_Bandwidth'= c(288, 128),
'Max_Power'= c(120, 75),
'Texture_Rate'=c(153.6, 67.2),
'Pixel_Rate'=c(81.6, 21.6),
'TMUs'=c(96, 56),
'ROPs'=c(48, 32),
'L2_Cache'=c(1536, 1024),
'Best_Width' = c(7680, 1920))  # Example new data for prediction
predicted_prices <- predict(wls_model, newdata = new_data)
print(predicted_prices)
hist(residuals, main = "Histogram of Residuals")
# Testing model
new_data <- data.frame('Memory'= c(8192, 4096, 4096),
'Memory_Bandwidth'= c(288, 128, 112.1),
'Max_Power'= c(120, 75, 75),
'Texture_Rate'=c(153.6, 67.2, 70),
'Pixel_Rate'=c(81.6, 21.6, 47),
'TMUs'=c(96, 56, 48),
'ROPs'=c(48, 32, 32),
'L2_Cache'=c(1536, 1024, 1024),
'Best_Width' = c(7680, 1920, 1920))  # Example new data for prediction
predicted_prices <- predict(wls_model, newdata = new_data)
print(predicted_prices)
# Testing model
new_data <- data.frame('Memory'= c(8192, 4096, 4096),
'Memory_Bandwidth'= c(288, 128, 112.1),
'Max_Power'= c(120, 75, 75),
'Texture_Rate'=c(153.6, 67.2, 70),
'Pixel_Rate'=c(81.6, 32.4, 47),
'TMUs'=c(96, 56, 48),
'ROPs'=c(48, 32, 32),
'L2_Cache'=c(1536, 1024, 1024),
'Best_Width' = c(7680, 1920, 1920))  # Example new data for prediction
predicted_prices <- predict(wls_model, newdata = new_data)
print(predicted_prices)
hist(residuals, main = "Histogram of Residuals", breaks = 10)
hist(residuals, main = "Histogram of Residuals", breaks = 10)
## Independence, normality and homoscedasticity of residuals
residuals <- residuals(wls_model)
hist(residuals, main = "Histogram of Residuals", breaks = 10)
hist(residuals, main = "Histogram of Residuals", breaks = 20)
# Testing model
new_data <- data5
predicted_prices <- predict(wls_model, newdata = new_data)
print(predicted_prices)
# Testing model
new_data <- data5[sample(nrow(data5), 10), ]
predicted_prices <- predict(wls_model, newdata = new_data)
print(predicted_prices)
View(new_data)
predicted_prices <- predict(wls_model, newdata = new_data1)
predicted_prices <- predict(wls_model, newdata = new_data1)
# Testing model
new_data1 <- data.frame('Memory'= c(8192, 4096, 4096),
'Memory_Bandwidth'= c(288, 128, 112.1),
'Max_Power'= c(120, 75, 75),
'Texture_Rate'=c(153.6, 67.2, 70),
'Pixel_Rate'=c(81.6, 32.4, 47),
'TMUs'=c(96, 56, 48),
'ROPs'=c(48, 32, 32),
'L2_Cache'=c(1536, 1024, 1024),
'Best_Width' = c(7680, 1920, 1920))  # Example new data for prediction
predicted_prices <- predict(wls_model, newdata = new_data1)
print(predicted_prices)
View(wls_model)
coef(wls_model)
coef(wls_model)[2]
# Testing model
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(wls_model)[5], col = "red")
abline(coef(wls_model)[1],coef(wls_model)[5], col = "red")
abline(coef(lrm)[1],coef(lrm)[5], col = "red")
plot(data2$Pixel_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to pixel rate",
xlab = "Pixel rate", ylab = "Release price", col = "blue", pch = 16)
# Testing model
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(lrm)[1],coef(lrm)[5], col = "red")
print(coef(wls_model))
# Testing model
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(wls_model)[1],coef(wls_model)[5], col = "red")
View(lrm)
# Testing model
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue")
# Testing model
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(wls_model)[1],coef(wls_model)[5], col = "red")
# Testing model
plot(data2$Texture_Rate, data5$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
# Testing model
plot(data2$Texture_Rate, data5$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
# Testing model
plot(data5$Texture_Rate, data5$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(wls_model)[1],coef(wls_model)[5], col = "red")
abline(coef(lrm)[1],coef(lrm)[5], col = "red")
# Testing model
plot(data5$Texture_Rate, data5$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
abline(coef(wls_model)[1],coef(wls_model)[5], col = "red")
print(coef(wls_model))
coef(wls_model)[5]
plot(lrm$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
bptest(lrm)
bptest(lrm)
# weighted least square
wls_model <- lm(Release_Price ~  Memory +
Memory_Bandwidth + Max_Power + Texture_Rate + Pixel_Rate +
TMUs + ROPs + L2_Cache + Best_Width, data = data5, weights = 1 / residuals(lrm)^2)
print(wls_model)
plot(wls_model$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
hist(residuals, main = "Histogram of Residuals", breaks = 20)
bptest(wls_model)
# Data reading
rm(list = ls())
install.packages("lmtest")
library(lmtest)
data0 <- read.csv("All_GPUs.csv")
summary(data0)
# Omitting NAs and hidden NAs values
data0[data0 == "none" | data0 == "" | data0 == "\n- " | data0 == "\nUnknown Release Date " | data0 == "None"] <- NA
data0[data0 == "Yes"] <- 1
data0[data0 == "No" ] <- 0
data1 <- data0[complete.cases(data0),]
summary(data1)
# Reformatting Architecture and Name variables
data1$Architecture <- sub("([A-Za-z]+).*", "\\1", data1$Architecture)
data1$Series <- sub("([A-Za-z]+).*", "\\1", data1$Name)
data1 <- data1[,-19]
# Omitting units and turning to numeric variables
data1$Boost_Clock <- as.numeric(gsub("[^0-9.]+", "", data1$Boost_Clock))
data1$Core_Speed <- as.numeric(gsub("[^0-9.]+", "", data1$Core_Speed))
data1$L2_Cache <- as.numeric(gsub("[^0-9.]+", "", data1$L2_Cache))
data1$Max_Power <- as.numeric(gsub("[^0-9.]+", "", data1$Max_Power))
data1$Memory <- as.numeric(gsub("[^0-9.]+", "", data1$Memory))
data1$Memory_Bandwidth <- as.numeric(gsub("[^0-9.]+", "", data1$Memory_Bandwidth))
data1$Memory_Bus <- as.numeric(gsub("[^0-9.]+", "", data1$Memory_Bus))
data1$Memory_Speed <- as.numeric(gsub("[^0-9.]+", "", data1$Memory_Speed))
data1$Pixel_Rate <- as.numeric(gsub("[^0-9.]+", "", data1$Pixel_Rate))
data1$ROPs <- as.numeric(gsub("[^0-9.]+", "", data1$ROPs))
data1$Release_Price <- as.numeric(gsub("[^0-9.]+", "", data1$Release_Price))
data1$Texture_Rate <- as.numeric(gsub("[^0-9.]+", "", data1$Texture_Rate))
# Reformatting Best_Resolution, Resolution_WxH, PSU, Release_Date
split_value1 <- strsplit(data1$Best_Resolution, " x ")
best_width <- sapply(split_value1, function(x) as.numeric(x[1]))
best_height <- sapply(split_value1, function(x) as.numeric(x[2]))
Best_Resolution <- data.frame(Best_Width = best_width, Best_Height = best_height)
data1 <- subset(data1, select = -Best_Resolution)
data1 <- cbind(data1, Best_Resolution)
split_value2 <- strsplit(data1$Resolution_WxH, "x")
resolution_w <- sapply(split_value2, function(x) as.numeric(x[1]))
resolution_h <- sapply(split_value2, function(x) as.numeric(x[2]))
Resolution_WxH <- data.frame(Resolution_W = resolution_w, Resolution_H = resolution_h)
data1 <- subset(data1, select = -Resolution_WxH)
data1 <- cbind(data1, Resolution_WxH)
split_value3 <- strsplit(data1$PSU, " & ")
psu_v <- sapply(split_value2, function(x) as.numeric(gsub("[^0-9.]+", "", x[1])))
psu_amp <- sapply(split_value2, function(x) as.numeric(gsub("[^0-9.]+", "", x[2])))
PSU <- data.frame(PSU_V = psu_v, PSU_Amp = psu_amp)
data1 <- subset(data1, select = -PSU)
data1 <- cbind(data1, PSU)
current_date <- Sys.Date()
Release_Date <- read.table(text = data1$Release_Date, header = FALSE, stringsAsFactors = FALSE)
Release_Date1 <- as.character(Release_Date)
Release_Date2 <- eval(parse(text = Release_Date1))
Release_Date3 <- as.Date(Release_Date2, format = "%d-%b-%Y")
data1$Days_since_RD <- as.numeric(difftime(current_date, Release_Date3, units = "days"))
data1 <- data1[,-24]
library(dplyr)
data2 <- data1 %>%
select(Release_Price, Architecture, Series, Manufacturer, Dedicated, Integrated,
Notebook_GPU, SLI_Crossfire, Boost_Clock, Core_Speed, Memory_Type, Memory,
Memory_Speed, Memory_Bandwidth, Memory_Bus, Process, Max_Power, PSU_Amp,
PSU_V, Shader, Direct_X, Open_GL, Texture_Rate, Pixel_Rate,
TMUs, ROPs, L2_Cache, Best_Height, Best_Width, Resolution_W,
Resolution_H, DVI_Connection, DisplayPort_Connection, HDMI_Connection, VGA_Connection, Power_Connector,
Days_since_RD)
summary(data2)
boxplot(data2$Release_Price,
main = "GPU Price Distribution",
xlab = "Price in USD",
col = "lightblue",
border = "black",
horizontal = TRUE)
hist(data2$Release_Price,
main = "GPU Price Distribution",
xlab = "Price in USD",
col = "lightblue",
border = "black",
breaks = 10)
architecture_count <- unique(data2$Architecture)
architecture_freq <- table(data2$Architecture)
pie(architecture_freq, labels = paste(architecture_freq,"\n",architecture_count), main = "Architecture distribution", cex = 0.8)
series_count <- unique(data2$Series)
series_freq <- table(data2$Series)
pie(series_freq, labels = paste(series_freq,"\n",series_count), main = "Series distribution", cex = 0.8)
manufacturer_count <- unique(data2$Manufacturer)
manufacturer_freq <- table(data2$Manufacturer)
pie(manufacturer_freq, labels = paste(manufacturer_freq,"\n",manufacturer_count), main = "Manufacturer distribution", cex = 0.8)
dedicated_count <- unique(data2$Dedicated)
dedicated_freq <- table(data2$Dedicated)
pie(dedicated_freq, labels = paste(dedicated_freq,"\n",dedicated_count), main = "Dedicated distribution", cex = 0.8)
integrated_count <- unique(data2$Integrated)
integrated_freq <- table(data2$Integrated)
pie(dedicated_freq, labels = paste(integrated_freq,"\n",integrated_count), main = "Integrated distribution", cex = 0.8)
notebookgpu_count <- unique(data2$Notebook_GPU)
notebookgpu_freq <- table(data2$Notebook_GPU)
pie(notebookgpu_freq, labels = paste(notebookgpu_freq,"\n",notebookgpu_count), main = "Notebook GPU distribution", cex = 0.8)
slicrossfire_count <- unique(data2$SLI_Crossfire)
slicrossfire_freq <- table(data2$SLI_Crossfire)
pie(slicrossfire_freq, labels = paste(slicrossfire_freq,"\n",slicrossfire_count), main = "SLI Crossfire distribution", cex = 0.8)
plot(data2$Boost_Clock, data2$Release_Price,
main = "Release price distribution \n with respect to boost clock",
xlab = "Boost clock", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Core_Speed, data2$Release_Price,
main = "Release price distribution \n with respect to core speed",
xlab = "Core speed", ylab = "Release price", col = "blue", pch = 16)
memorytype_count <- unique(data2$Memory_Type)
memorytype_freq <- table(data2$Memory_Type)
pie(memorytype_freq, labels = paste(memorytype_freq,"\n",memorytype_count), main = "Memory type distribution", cex = 0.8)
plot(data2$Memory, data2$Release_Price,
main = "Release price distribution \n with respect to memory",
xlab = "Memory", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Memory_Speed, data2$Release_Price,
main = "Release price distribution \n with respect to memory speed",
xlab = "Memory speed", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Memory_Bandwidth, data2$Release_Price,
main = "Release price distribution \n with respect to memory bandwidth",
xlab = "Memory bandwidth", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Memory_Bus, data2$Release_Price,
main = "Release price distribution \n with respect to memory bus",
xlab = "Memory bus", ylab = "Release price", col = "blue", pch = 16)
process_count <- unique(data2$Process)
process_freq <- table(data2$Process)
pie(process_freq, labels = paste(process_freq,"\n",process_count), main = "Process distribution", cex = 0.8)
plot(data2$Max_Power, data2$Release_Price,
main = "Release price distribution \n with respect to max power",
xlab = "Max power", ylab = "Release price", col = "blue", pch = 16)
plot(data2$PSU_Amp, data2$Release_Price,
main = "Release price distribution \n with respect to PSU Amp",
xlab = "PSU Amp", ylab = "Release price", col = "blue", pch = 16)
plot(data2$PSU_V, data2$Release_Price,
main = "Release price distribution \n with respect to PSU V",
xlab = "PSU V", ylab = "Release price", col = "blue", pch = 16)
shader_count <- unique(data2$Shader)
shader_freq <- table(data2$Shader)
pie(shader_freq, labels = paste(shader_freq,"\n",shader_count), main = "Shader distribution", cex = 0.8)
directx_count <- unique(data2$Direct_X)
directx_freq <- table(data2$Direct_X)
pie(directx_freq, labels = paste(directx_freq,"\n",directx_count), main = "Direct X distribution", cex = 0.8)
opengl_count <- unique(data2$Open_GL)
opengl_freq <- table(data2$Open_GL)
pie(opengl_freq, labels = paste(opengl_freq,"\n",opengl_count), main = "Direct X distribution", cex = 0.8)
plot(data2$Texture_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to texture rate",
xlab = "Texture rate", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Pixel_Rate, data2$Release_Price,
main = "Release price distribution \n with respect to pixel rate",
xlab = "Pixel rate", ylab = "Release price", col = "blue", pch = 16)
plot(data2$TMUs, data2$Release_Price,
main = "Release price distribution \n with respect to TMUs",
xlab = "TMUs", ylab = "Release price", col = "blue", pch = 16)
plot(data2$ROPs, data2$Release_Price,
main = "Release price distribution \n with respect to ROPs",
xlab = "ROPs", ylab = "Release price", col = "blue", pch = 16)
plot(data2$L2_Cache, data2$Release_Price,
main = "Release price distribution \n with respect to L2 cache",
xlab = "L2 cache", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Best_Width, data2$Release_Price,
main = "Release price distribution \n with respect to best width",
xlab = "Best width", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Best_Height, data2$Release_Price,
main = "Release price distribution \n with respect to best height",
xlab = "Best height", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Resolution_W, data2$Release_Price,
main = "Release price distribution \n with respect to resolution (width)",
xlab = "Resolution (width)", ylab = "Release price", col = "blue", pch = 16)
plot(data2$Resolution_H, data2$Release_Price,
main = "Release price distribution \n with respect to resolution (height)",
xlab = "Resolution (height)", ylab = "Release price", col = "blue", pch = 16)
plot(data2$DVI_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to DVI connection",
xlab = "DVI connection", ylab = "Release price", col = "blue", pch = 16)
plot(data2$DisplayPort_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to display port connection",
xlab = "Display port connection", ylab = "Release price", col = "blue", pch = 16)
plot(data2$HDMI_Connection, data2$Release_Price,
main = "Release price distribution \n with respect to HDMI connection",
xlab = "HDMI connection", ylab = "Release price", col = "blue", pch = 16)
powerconnector_count <- unique(data2$Power_Connector)
powerconnector_freq <- table(data2$Power_Connector)
pie(powerconnector_freq, labels = paste(powerconnector_freq,"\n",powerconnector_count), main = "Power connector distribution", cex = 0.8)
plot(data2$Days_since_RD, data2$Release_Price,
main = "Release price distribution \n with respect to days since release date",
xlab = "Days since release date", ylab = "Release price", col = "blue", pch = 16)
encoded_architecture <- model.matrix(~ data2$Architecture - 1, data = data2)
encoded_series <- model.matrix(~ data2$Series - 1, data = data2)
encoded_manufacturer <- model.matrix(~ data2$Manufacturer - 1, data = data2)
encoded_memorytype <- model.matrix(~ data2$Memory_Type - 1, data = data2)
encoded_process <- model.matrix(~ data2$Process - 1, data = data2)
encoded_directx <- model.matrix(~ data2$Direct_X - 1, data = data2)
encoded_opengl <- model.matrix(~ data2$Open_GL - 1, data = data2)
encoded_powerconnector <- model.matrix(~ data2$Power_Connector - 1, data = data2)
encoded_data <- cbind(encoded_architecture, encoded_series, encoded_manufacturer, encoded_memorytype,
encoded_opengl, encoded_directx, encoded_process, encoded_powerconnector)
column_to_exclude <- c(2, 3, 4, 11, 16, 21, 22, 36)
data3 <- data2[, -column_to_exclude]
data4 <- cbind(data3, encoded_data)
## Linearity
data4 <- as.data.frame(sapply(data4, as.numeric))
correlations <- sapply(data4[, -1], function(column) cor(data4[[1]], column))
strong_correlations <- correlations[abs(correlations) >= 0.6]
print(strong_correlations)
data5 <- data4 %>%
select(Release_Price, Memory,
Memory_Bandwidth, Max_Power, Texture_Rate, Pixel_Rate,
TMUs, ROPs, L2_Cache, Best_Height, Best_Width)
## Multicolinearity
library(corrplot)
cor_matrix <- cor(data5)
corrplot(cor_matrix)
print(cor_matrix)
data5 <- data4 %>%
select(Release_Price, Memory,
Memory_Bandwidth, Max_Power, Texture_Rate, Pixel_Rate,
TMUs, ROPs, L2_Cache, Best_Width)
# Linear regression model
lrm <- lm(data5$Release_Price ~ ., data = data5)
print(lrm)
## Independence, normality and homoscedasticity of residuals
residuals <- residuals(lrm)
plot(lrm$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
hist(residuals, main = "Histogram of Residuals")
bptest(lrm)
# weighted least square
wls_model <- lm(Release_Price ~  Memory +
Memory_Bandwidth + Max_Power + Texture_Rate + Pixel_Rate +
TMUs + ROPs + L2_Cache + Best_Width, data = data5, weights = 1 / residuals(lrm)^2)
## Independence, normality and homoscedasticity of residuals
residuals <- residuals(wls_model)
plot(wls_model$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
hist(residuals, main = "Histogram of Residuals", breaks = 20)
bptest(wls_model)
bptest(lrm)
hist(residuals, main = "Histogram of Residuals", breaks = 20)
plot(wls_model$fitted.values, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values Plot")
hist(residuals, main = "Histogram of Residuals", breaks = 20)
